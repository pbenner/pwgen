#! /usr/bin/env python3

# Copyright (C) 2014 Philipp Benner
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import configparser
import getopt
import getpass
import pwgen
import os
import re
import sys

# global options
# ------------------------------------------------------------------------------

options = {
    'alphabet'   : "any",
    'domain'     : "",
    'length'     : 20,
    'seed_init'  : 0,
    'username'   : "",
    'verbose'    : False
    }

def split(string, token):
    return re.sub(' +', ' ', string.strip()).split(token)

# usage
# ------------------------------------------------------------------------------

def usage():
    """Print usage."""
    print()
    print("pwgen [option]... DOMAIN")
    print()
    print("Options:")
    print("   -a, --alphabet string          - alphabet for generating the password")
    print("                                    (alpha, numeric, alphanumeric, any)")
    print("   -l, --length integer           - length of the generated password")
    print("   -u, --username string          - username (optional)")
    print("   -s, --seed-init integer        - initial seed")
    print()
    print("   -h, --help                     - print help")
    print("   -v, --verbose                  - be verbose")
    print()

# read config
# ------------------------------------------------------------------------------

def read_config():
    config_parser = configparser.RawConfigParser()
    config_parser.read(os.path.expanduser("~/.pwgen.conf"))
    if not config_parser.has_section('PWGEN'):
        raise IOError("Error: no configuration file found.")
    if config_parser.has_option('PWGEN', 'alias'):
        alias_list = config_parser.get('PWGEN', 'alias')
        for alias in alias_list.split('\n'):
            alias = split(alias, ' ')
            if len(alias) != 2:
                raise IOError("Invalid alias list in configuration file.")
            options['domain'] = re.sub(alias[0], alias[1], options['domain'])
    if config_parser.has_option('PWGEN', 'seed-init'):
        seed_list = config_parser.get('PWGEN', 'seed-init')
        for seed in seed_list.split('\n'):
            seed = split(seed, ' ')
            if len(seed) == 1: # default seed
                options['seed_init'] = int(seed[0])
            elif len(seed) == 2: # specific seed
                if options['domain'] == seed[0]:
                    options['seed_init'] = int(seed[1])
            else:
                raise IOError("Invalid seed list in configuration file.")
    if config_parser.has_option('PWGEN', 'length'):
        length_list = config_parser.get('PWGEN', 'length')
        for length in length_list.split('\n'):
            length = split(length, ' ')
            if len(length) != 2:
                raise IOError("Invalid length list in configuration file.")
            if options['domain'] == length[0]:
                options['length'] = int(length[1])
    if config_parser.has_option('PWGEN', 'alphabet'):
        alphabet_list = config_parser.get('PWGEN', 'alphabet')
        for alphabet in alphabet_list.split('\n'):
            alphabet = split(alphabet, ' ')
            if len(alphabet) != 2:
                raise IOError("Invalid alphabet list in configuration file.")
            if options['domain'] == alphabet[0]:
                options['alphabet'] = alphabet[1]

# generate password
# ------------------------------------------------------------------------------

def generate_password():
    alphabet = options['alphabet']
    seed     = options['seed_init']
    length   = options['length']
    if options['username']:
        domain = '{0}@{1}'.format(options['username'], options['domain'])
    else:
        domain = options['domain']

    if options['verbose']:
        print("Domain:", domain)

    key = getpass.getpass()
    password = pwgen.generate_password(seed, key, domain, length, alphabet)

    print(password)

# __main__
# ------------------------------------------------------------------------------

def __main__():
    global options
    try:
        longopts   = ["alphabet=", "length=", "username=", "seed-init=", "help", "verbose"]
        opts, tail = getopt.getopt(sys.argv[1:], "a:l:u:s:hv", longopts)
    except getopt.GetoptError:
        usage()
        return 2
    output = None
    if len(tail) != 1:
        usage()
        return 1
    # the domain needs to be available before parsing the config file
    domain = tail[0].split("@")
    if len(domain) == 1:
        options['domain'] = domain[0]
    elif len(domain) == 2:
        options['username'] = domain[0]
        options['domain'  ] = domain[1]
    else:
        raise IOError("Invalid domain argument")
    # parse config file before options
    read_config()
    # parse options and allow to overwrite config defaults
    for o, a in opts:
        if o in ("-a", "--alphabet"):
            options['alphabet'] = a
        if o in ("-l", "--length"):
            options['length'] = int(a)
        if o in ("-u", "--username"):
            options['username'] = a
        if o in ("-s", "--seed-init"):
            options['username'] = int(a)
        if o in ("-v", "--verbose"):
            options["verbose"] = True
        if o in ("-h", "--help"):
            usage()
            return 0

    generate_password()

if __name__ == "__main__":
    try:
        sys.exit(__main__())
    except IOError as e:
        sys.stderr.write('%s\n' % e)
        sys.exit(1)
